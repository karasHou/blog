import{_ as a,c as s,o as n,V as e}from"./chunks/framework.acSFqKpJ.js";const g=JSON.parse('{"title":"前言","description":"","frontmatter":{},"headers":[],"relativePath":"03.工程化、工具/更好的Node.js管理工具——volta.md","filePath":"03.工程化、工具/更好的Node.js管理工具——volta.md"}'),p={name:"03.工程化、工具/更好的Node.js管理工具——volta.md"},t=e(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>过去我们通常使用 nvm 来管理 node 版本，但多少会有一些问题，例如：切换困难（需要使用命令手动切换版本），自动化方案成本高（<a href="https://juejin.cn/post/7292309713704976425" target="_blank" rel="noreferrer">使用zsh脚本</a>等），经常会遇到奇奇怪怪的bug，切换卡顿性能问题严重。</p><h1 id="新工具的出现" tabindex="-1">新工具的出现 <a class="header-anchor" href="#新工具的出现" aria-label="Permalink to &quot;新工具的出现&quot;">​</a></h1><p>一次偶然的机会了解到了 volta，一个基于 rust 开发的工具，支持给项目指定node版本（以及包管理器）还可以自动切换。也就是说在项目指定好版本之后，任何人只要安装了volta都可以自动切换你指定的版本。</p><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><blockquote><p>volta 官网：<a href="https://volta.sh/" target="_blank" rel="noreferrer">https://volta.sh/</a></p></blockquote><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>curl https://get.volta.sh | bash</span></span></code></pre></div><h3 id="设置-node-js-版本" tabindex="-1">设置 Node.js 版本 <a class="header-anchor" href="#设置-node-js-版本" aria-label="Permalink to &quot;设置 Node.js 版本&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>volta install node@20.11.0</span></span></code></pre></div><p>这将在全局安装 20版本的nodejs作为全局的默认版本。</p><p>也可以指定模糊版本：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>volta install node@14</span></span></code></pre></div><h3 id="给项目设置特定node-js版本" tabindex="-1">给项目设置特定Node.js版本 <a class="header-anchor" href="#给项目设置特定node-js版本" aria-label="Permalink to &quot;给项目设置特定Node.js版本&quot;">​</a></h3><p>很常见的情况是，不同的项目之间可能使用不同的Node.js版本，在volta的场景下，可以将项目需要的包管理器、Node.js版本固定在项目内，跟随git一起提交，只要在团队指南内统一安装volta即可。</p><p>使用以下命令可以将项目对应信息固定在 package.json内：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>volta pin node@18.19</span></span>
<span class="line"><span>volta pin yarn@1.19</span></span></code></pre></div><p>效果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&quot;volta&quot;: {</span></span>
<span class="line"><span>  &quot;node&quot;: &quot;18.19.0&quot;,</span></span>
<span class="line"><span>  &quot;yarn&quot;: &quot;1.19.2&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这样当另一个同事下载并开启终端时，volta会自动读取项目内的 Node.js 版本并安装，同时会缓存。在项目路径下查看版本：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>    Node: v14.21.3 (current @ /Users/xxx/Documents/test-volta/</span></span>
<span class="line"><span>    typescript-4/package.json)</span></span>
<span class="line"><span>    pnpm: v8.15.1 (default)</span></span>
<span class="line"><span>    Yarn: v1.22.19 (default)</span></span></code></pre></div><h2 id="管理工具链" tabindex="-1">管理工具链 <a class="header-anchor" href="#管理工具链" aria-label="Permalink to &quot;管理工具链&quot;">​</a></h2><p>除了包管理器，我们经常需要安装一些 全局包来执行一些指令，例如 tsc、yalc等，如果利用nvm 或者没有node管理工具，在一些特定的场景下会遇到问题。</p><h3 id="如何安装全局工具" tabindex="-1">如何安装全局工具？ <a class="header-anchor" href="#如何安装全局工具" aria-label="Permalink to &quot;如何安装全局工具？&quot;">​</a></h3><p>类似于安装包管理器，我们可以使用 volta install xxx来安装：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>volta install typescript</span></span></code></pre></div><p>安装完成后，可以执行 tsc命令，以及可以使用 volta ls查看可执行命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Tool binaries available:</span></span>
<span class="line"><span>	tsc, tsserver (default)</span></span></code></pre></div><h3 id="volta-如何管理工具链" tabindex="-1">volta 如何管理工具链？ <a class="header-anchor" href="#volta-如何管理工具链" aria-label="Permalink to &quot;volta 如何管理工具链？&quot;">​</a></h3><p>例如我有两个项目，一个项目依赖 typescript 4版本，而另一个依赖5版本，但是我全局只能安装一个版本，那在两个项目内必定会有一个会因为版本不匹配而运行 tsc 命令导致报错。</p><p>在以上场景下，volta 在运行命令是会智能查找（官方描述叫 track）当前项目下依赖的组件包的版本，按照项目的版本来运行命令：</p><p>由当前两个模拟项目，分别依赖了ts4和5版本，</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>├── typescript-4</span></span>
<span class="line"><span>|  ├── node_modules</span></span>
<span class="line"><span>|  |  └── typescript</span></span>
<span class="line"><span>|  ├── package-lock.json</span></span>
<span class="line"><span>|  ├── package.json</span></span>
<span class="line"><span>|  └── src</span></span>
<span class="line"><span>|     └── test.ts</span></span>
<span class="line"><span>└── typescript-5</span></span>
<span class="line"><span>	 |  ├── node_modules</span></span>
<span class="line"><span>   |  |  └── typescript</span></span>
<span class="line"><span>   ├── package.json</span></span>
<span class="line"><span>   └── src</span></span>
<span class="line"><span>      └── test.ts</span></span></code></pre></div><p>当安装 volta 后，分别在两个目录下运行 tsc --version会得到：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 5目录</span></span>
<span class="line"><span>Version 5.3.3</span></span>
<span class="line"><span># 4目录</span></span>
<span class="line"><span>Version 4.9.5</span></span></code></pre></div><p>执行 volta ls查看当前路径的tsc版本：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>    Tool binaries available:</span></span>
<span class="line"><span>        tsc, tsserver (current @ /Users/xxx/Documents/test-volta/</span></span>
<span class="line"><span>        typescript-4/package.json)</span></span></code></pre></div><p>可以看到这里volta展示的路径是当前项目的路径，以及一个 current。</p><p>而如果我在非项目路径下执行命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Tool binaries available:</span></span>
<span class="line"><span>	tsc, tsserver (default)</span></span></code></pre></div><p>可以看到展示的是 default，也就是初始安装的默认版本。</p>`,41),l=[t];function o(i,c,d,r,h,u){return n(),s("div",null,l)}const b=a(p,[["render",o]]);export{g as __pageData,b as default};
